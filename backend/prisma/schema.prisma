generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

enum UserRole {
    LISTENER
    CREATOR
    ADMIN
}

enum UploadStatus {
    PENDING
    PROCESSING
    COMPLETED
    FAILED
}

model User {
    id           String   @id @default(cuid())
    email        String   @unique
    username     String   @unique
    displayName  String?
    passwordHash String? // Null for OAuth users
    avatar       String?
    bio          String?
    role         UserRole @default(LISTENER)

    // Authentication provider tracking
    provider String  @default("email")
    googleId String? @unique //Google OAuth ID

    // Account status
    isActive Boolean @default(true) // Soft delete flag

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    // authentication
    sessions Session[]

    podcasts      Podcast[]
    episodes      Episode[]
    subscriptions Subscription[]
    reviews       Review[]
    uploads       Upload[]
    roleChanges   RoleChange[]

    @@index([email])
    @@index([role])
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime

    // clerk-specific fields
    clerkUserId String?
    provider    String?

    // Session metadata
    ipAddress    String?
    userAgent    String?
    lastActiveAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade) // all record of this user will be deleted when the user is deleted including this session

    @@index([userId])
}

model Podcast {
    id              String   @id @default(cuid())
    title           String
    description     String?
    slug            String   @unique
    imageUrl        String
    category        String
    language        String   @default("en")
    tags            String[]
    rating          Float    @default(0.0)
    subscriberCount Int      @default(0)
    totalEpisodes   Int      @default(0)
    isExplicit      Boolean  @default(false)
    isActive        Boolean  @default(true)
    isPublic        Boolean  @default(true)
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    creatorId String

    episodes      Episode[]
    subscriptions Subscription[]
    reviews       Review[]

    creator User @relation(fields: [creatorId], references: [id])

    @@index([slug])
    @@index([category])
    @@index([createdAt])
}

model Episode {
    id            String  @id @default(cuid())
    title         String
    slug          String
    description   String?
    audioUrl      String
    duration      Int
    episodeNumber Int
    isPublished   Boolean @default(false)
    publishDate   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    podcastId String
    creatorId String

    podcast Podcast @relation(fields: [podcastId], references: [id], onDelete: Cascade)

    creator User @relation(fields: [creatorId], references: [id], onDelete: Cascade)

    @@unique([podcastId, slug]) //The @@unique([podcastId, slug]) constraint means that the combination of podcastId and slug must be unique across the entire Episode table
    @@index([slug])
    @@index([publishDate])
    @@index([isPublished])
    @@index([creatorId])
}

model Subscription {
    id        String   @id @default(cuid())
    userId    String
    podcastId String
    createdAt DateTime @default(now())

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    podcast Podcast @relation(fields: [podcastId], references: [id], onDelete: Cascade)

    @@unique([userId, podcastId]) // A user can only subscribe to a podcast once
    @@index([userId])
    @@index([podcastId])
}

model Review {
    id        String   @id @default(cuid())
    userId    String
    podcastId String
    rating    Int
    comment   String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    podcast Podcast @relation(fields: [podcastId], references: [id], onDelete: Cascade)

    @@unique([userId, podcastId]) // A user can only review a podcast once
    @@index([podcastId])
    @@index([rating])
}

model Upload {
    id        String       @id @default(cuid())
    userId    String
    fileName  String
    fileUrl   String
    fileSize  Int
    status    UploadStatus @default(PENDING)
    createdAt DateTime     @default(now())
    updatedAt DateTime     @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
    @@index([status])
}

model RoleChange {
    id        String   @id @default(cuid())
    userId    String
    fromRole  UserRole
    toRole    UserRole
    reason    String?
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}
